document.addEventListener('DOMContentLoaded', () => {
    const availableCityNames = [
        "–ú–æ—Å–∫–≤–∞",
        "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
        "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫",
        "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",
        "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥",
        "–ö–∞–∑–∞–Ω—å",
        "–ß–µ–ª—è–±–∏–Ω—Å–∫",
        "–û–º—Å–∫",
        "–°–∞–º–∞—Ä–∞",
        "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É",
        "–£—Ñ–∞",
        "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫",
        "–ü–µ—Ä–º—å",
        "–í–æ—Ä–æ–Ω–µ–∂",
        "–í–æ–ª–≥–æ–≥—Ä–∞–¥",
        "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä",
        "–°–∞—Ä–∞—Ç–æ–≤",
        "–¢—é–º–µ–Ω—å",
        "–¢–æ–ª—å—è—Ç—Ç–∏",
        "–ò–∂–µ–≤—Å–∫",
        "–ë–∞—Ä–Ω–∞—É–ª",
        "–£–ª—å—è–Ω–æ–≤—Å–∫",
        "–ò—Ä–∫—É—Ç—Å–∫",
        "–•–∞–±–∞—Ä–æ–≤—Å–∫",
        "–Ø—Ä–æ—Å–ª–∞–≤–ª—å",
        "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫",
        "–ú–∞—Ö–∞—á–∫–∞–ª–∞",
        "–¢–æ–º—Å–∫",
        "–û—Ä–µ–Ω–±—É—Ä–≥",
        "–ö–µ–º–µ—Ä–æ–≤–æ",
        "–ù–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫",
        "–†—è–∑–∞–Ω—å",
        "–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å",
        "–ù–∞–±–µ—Ä–µ–∂–Ω—ã–µ –ß–µ–ª–Ω—ã",
        "–ü–µ–Ω–∑–∞",
        "–õ–∏–ø–µ—Ü–∫",
        "–ö–∏—Ä–æ–≤",
        "–ß–µ–±–æ–∫—Å–∞—Ä—ã",
        "–¢—É–ª–∞",
        "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥",
        "–ë—Ä—è–Ω—Å–∫",
        "–ò–≤–∞–Ω–æ–≤–æ",
        "–ú–∞–≥–Ω–∏—Ç–æ–≥–æ—Ä—Å–∫",
        "–ë–µ–ª–≥–æ—Ä–æ–¥",
        "–°–æ—á–∏",
        "–í–ª–∞–¥–∏–º–∏—Ä",
        "–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫",
        "–ß–µ—Ä–µ–ø–æ–≤–µ—Ü"
    ];

    const weatherCodeToEmoji = {
        0: "‚òÄÔ∏è",
        1: "üå§Ô∏è",
        2: "‚õÖ",
        3: "‚òÅÔ∏è",
        51: "üåßÔ∏è",
        61: "üå¶Ô∏è",
        80: "‚õàÔ∏è",
    };

    const maxCities = 5;
    const storageKey = 'savedCities';

    function addCityToStorage(city) {
        let cities = JSON.parse(localStorage.getItem(storageKey)) || [];

        cities = cities.filter(c => c.toLowerCase() !== city.toLowerCase());

        cities.unshift(city);

        if (cities.length > maxCities) {
            cities = cities.slice(0, maxCities);
        }

        localStorage.setItem(storageKey, JSON.stringify(cities));
    }

    function loadCitiesFromStorage() {
        return JSON.parse(localStorage.getItem(storageKey)) || [];
    }

    function fillForecastGrid(data) {
        const monthTranslationsShort = {
            0: "–Ø–Ω–≤",
            1: "–§–µ–≤",
            2: "–ú–∞—Ä",
            3: "–ê–ø—Ä",
            4: "–ú–∞–π",
            5: "–ò—é–Ω—å",
            6: "–ò—é–ª—å",
            7: "–ê–≤–≥",
            8: "–°–µ–Ω",
            9: "–û–∫—Ç",
            10: "–ù–æ—è",
            11: "–î–µ–∫"
        };

        const grid = document.querySelector('.forecast-grid');
        grid.innerHTML = '';

        for (let i = 0; i < data.daily.time.length; i++) {
            const dateStr = data.daily.time[i];
            const weatherCode = data.daily.weather_code[i];

            const dateObj = new Date(dateStr);
            const day = dateObj.getDate();
            const monthRu = monthTranslationsShort[dateObj.getMonth()] || '';

            const formattedDate = `${monthRu} ${day}`;

            const weatherEmoji = weatherCodeToEmoji[weatherCode] || "‚òÄÔ∏è";

            const card = document.createElement('div');
            card.classList.add('forecast-card');
            card.innerHTML = `
            <div class="date">${formattedDate}</div>
            <div class="weather-code">${weatherEmoji}</div>
        `;

            grid.appendChild(card);
        }
    }


    const cityNameSearchBar = document.getElementById('city-name-search-input');
    const cityNameSearchDropdown = document.getElementById('city-name-search-dropdown');
    const cityNameSearchSubmitButton = document.getElementById('city-name-search-input-submit-button');
    const loading = document.getElementById('loading');
    const savedCities = loadCitiesFromStorage();

    cityNameSearchBar.value = '';

    document.addEventListener('click', (event) => {
        if (!cityNameSearchBar.contains(event.target) && !cityNameSearchDropdown.contains(event.target)) {
            cityNameSearchDropdown.classList.remove('show');
            cityNameSearchBar.classList.remove('adjust');
        }
    });

    cityNameSearchBar.addEventListener('focus', () => {
        cityNameSearchDropdown.innerHTML = '';

        if (savedCities.length > 0) {
            savedCities.forEach(city => {
                const div = document.createElement('div');
                div.classList.add('dropdown-entry');
                div.textContent = city;

                div.addEventListener('click', () => {
                    cityNameSearchBar.value = city;
                    cityNameSearchDropdown.classList.remove('show');
                    cityNameSearchBar.classList.remove('adjust');
                });

                cityNameSearchDropdown.appendChild(div);
            });

            cityNameSearchBar.classList.add('adjust');
            cityNameSearchDropdown.classList.add('show');
        } else {
            cityNameSearchBar.classList.remove('adjust');
            cityNameSearchDropdown.classList.remove('show');
        }
    });


    cityNameSearchBar.addEventListener('keyup', () => {
        const inputValue = cityNameSearchBar.value.trim().toLowerCase();

        if (inputValue !== '') {
            const filteredCities = availableCityNames.filter(city =>
                city.toLowerCase().includes(inputValue)
            );

            cityNameSearchDropdown.innerHTML = '';

            if (filteredCities.length > 0) {
                filteredCities.forEach(city => {
                    const div = document.createElement('div');
                    div.classList.add('dropdown-entry');
                    div.textContent = city;

                    div.addEventListener('click', () => {
                        cityNameSearchBar.value = city;
                        cityNameSearchDropdown.classList.remove('show');
                        cityNameSearchBar.classList.remove('adjust');
                    });

                    cityNameSearchDropdown.appendChild(div);
                });

                cityNameSearchBar.classList.add('adjust');
                cityNameSearchDropdown.classList.add('show');
            } else {
                cityNameSearchBar.classList.remove('adjust');
                cityNameSearchDropdown.classList.remove('show');
            }
        } else {
            cityNameSearchBar.classList.remove('adjust');
            cityNameSearchDropdown.classList.remove('show');
            cityNameSearchDropdown.innerHTML = '';
        }
    });

    cityNameSearchSubmitButton.addEventListener('click', () => {
        const inputValue = cityNameSearchBar.value.trim();

        if (inputValue !== '') {
            loading.style.display = 'block';
            addCityToStorage(inputValue);

            fetch(`/api/get_weather/${encodeURIComponent(inputValue)}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Weather data:', data);
                    fillForecastGrid(data);
                })
                .catch(error => {
                    console.error('Fetch error:', error);
                })
                .finally(() => {
                    loading.style.display = 'none';  // hide loading gif when done (success or error)
                });
        }
    });
});
